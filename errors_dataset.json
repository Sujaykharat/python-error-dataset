{
    "ZeroDivisionError": {
        "trigger_function": "1 / 0",
        "explanation": "You tried to divide a number by zero."
    },
    "IndexError": {
        "trigger_function": "[1][2]",
        "explanation": "You tried to access an index that is outside the range of the list. Ensure the index is within the valid range."
    },
    "SyntaxError": {
        "trigger_function": "exec('x === 2')",
        "explanation": "There's a syntax error in your code. Check for typos, misplaced operators, or other syntax issues."
    },
    "KeyError": {
        "trigger_function": "{}['missing_key']",
        "explanation": "You tried to access a dictionary key that does not exist. Make sure the key is spelled correctly or check if it exists."
    },
    "TypeError": {
        "trigger_function": "'string' + 1",
        "explanation": "You are trying to perform an operation on incompatible data types. Check the types of your variables."
    },
    "ValueError": {
        "trigger_function": "int('string')",
        "explanation": "You passed an argument to a function that is of the right type but has an invalid value. Ensure the value is within the expected range."
    },
    "AttributeError": {
        "trigger_function": "None.some_method()",
        "explanation": "You tried to access or call an attribute or method that does not exist in the object. Check if the attribute or method name is correct."
    },
    "NameError": {
        "trigger_function": "print(undefined_variable)",
        "explanation": "You tried to use a variable or function name that has not been defined. Make sure the name is spelled correctly and is defined."
    },
    "FileNotFoundError": {
        "trigger_function": "open('non_existent_file.txt')",
        "explanation": "The file you're trying to open does not exist. Check the file path and ensure the file exists."
    },
    "ImportError": {
        "trigger_function": "__import__('non_existent_module')",
        "explanation": "You tried to import a module that could not be found or is not installed. Verify the module name and installation."
    },
    "IndentationError": {
        "trigger_function": "exec('if True:\\nprint(\"Indentation Error\")')",
        "explanation": "There is an issue with the indentation of your code. Python relies on proper indentation to define blocks of code."
    },
    "MemoryError": {
        "trigger_function": "[0] * (10**10)",
        "explanation": "Your program has run out of memory. This can happen with very large data structures or infinite loops."
    },
    "RecursionError": {
        "trigger_function": "(lambda f: f(f))(lambda f: f(f))",
        "explanation": "Your function has called itself too many times, leading to a stack overflow. Check for base cases in recursive functions."
    },
    "StopIteration": {
        "trigger_function": "next(iter([]))",
        "explanation": "An iterator or generator has been exhausted, usually in a loop. Ensure you're not iterating beyond the available data."
    },
    "OverflowError": {
        "trigger_function": "float('inf') * 2",
        "explanation": "A numerical operation has exceeded the limits of the numeric type. This often happens with very large numbers."
    },
    "FileExistsError": {
        "trigger_function": "open('existing_file.txt', 'x')",
        "explanation": "The file you're trying to create already exists. Consider using a different file name or check if the file should be overwritten."
    },
    "PermissionError": {
        "trigger_function": "open('/root/forbidden_file.txt')",
        "explanation": "You don't have the necessary permissions to perform the operation, such as reading from or writing to a file."
    },
    "NotImplementedError": {
        "trigger_function": "raise NotImplementedError('This feature is not implemented yet.')",
        "explanation": "A method or function is defined but not implemented. This is often used as a placeholder to indicate that code is missing."
    },
    "ConnectionError": {
        "trigger_function": "raise ConnectionError('Connection failed.')",
        "explanation": "There was an issue with network connectivity or communication, often occurring with external resources or services."
    },
    "TimeoutError": {
        "trigger_function": "raise TimeoutError('Operation timed out.')",
        "explanation": "A network operation took too long to complete and has been stopped. This can happen with web requests or database operations."
    },
    "AssertionError": {
        "trigger_function": "assert False, 'This is an assertion error.'",
        "explanation": "An assert statement failed. This usually indicates that a condition expected to be true was false."
    },
    "EncodingError": {
        "trigger_function": "b'\\x80abc'.decode('utf-8')",
        "explanation": "There was an issue with character encoding when handling text data. Ensure the encoding matches the data being processed."
    },
    "DecodingError": {
        "trigger_function": "b'\\x80abc'.decode('ascii')",
        "explanation": "An error occurred when trying to decode data, usually from bytes to a string. Check if the data format matches the expected encoding."
    },
    "UnboundLocalError": {
        "trigger_function": "def test(): print(x); x = 1; test()",
        "explanation": "A local variable is referenced before it has been assigned a value. Ensure the variable is initialized before use."
    },
    "GeneratorExit": {
        "trigger_function": "(x for x in range(10)).close()",
        "explanation": "A generator was closed or exhausted before completing its intended iteration. This may happen with generators or coroutines."
    },
    "RuntimeError": {
        "trigger_function": "raise RuntimeError('This is a runtime error.')",
        "explanation": "An error that occurs during program execution. This is a broad category that includes various types of runtime issues."
    },
    "FileClosedError": {
        "trigger_function": "f = open('temp.txt', 'w'); f.close(); f.write('data')",
        "explanation": "An operation was attempted on a file that has already been closed. Ensure the file is open before performing operations on it."
    },
    "BufferError": {
        "trigger_function": "raise BufferError('Buffer error occurred.')",
        "explanation": "An operation was attempted on a buffer that has been released or is otherwise unavailable."
    },
    "NotCallableError": {
        "trigger_function": "x = 5; x()",
        "explanation": "An attempt was made to call a non-callable object, such as a non-function or method."
    },
    "NameClashError": {
        "trigger_function": "def test(): pass; test = 5",
        "explanation": "A name conflict occurred, often due to redefinition or improper scoping of variables or functions."
    },
    "NoSuchFileError": {
        "trigger_function": "open('non_existent_file.txt')",
        "explanation": "The file you're trying to access does not exist at the specified location."
    },
    "InconsistentUseOfTabsAndSpacesError": {
        "trigger_function": "exec('if True:\\n\\tprint(1)\\n    print(2)')",
        "explanation": "There is a mix of tabs and spaces used for indentation, leading to inconsistencies in code blocks."
    },
    "DeprecatedFeatureError": {
        "trigger_function": "import imp",
        "explanation": "You are using a feature or function that has been deprecated and may be removed in future versions."
    },
    "ContextError": {
        "trigger_function": "raise RuntimeError('Context error occurred.')",
        "explanation": "An operation or function was used in an incorrect context, such as using an object outside its intended scope."
    },
    "SyntaxWarning": {
        "trigger_function": "import warnings; warnings.warn('syntax warning', SyntaxWarning)",
        "explanation": "The code may not be strictly incorrect but contains constructs that are deprecated or may be problematic in future versions."
    },
    "ValueTooLargeError": {
        "trigger_function": "import sys; sys.setrecursionlimit(10**6)",
        "explanation": "A numerical value exceeds the limits of the numeric type or data structure, such as exceeding the maximum integer size."
    },
    "TypeHintError": {
        "trigger_function": "def func(x: int): pass; func('string')",
        "explanation": "A type hint or annotation does not match the actual type of the value. This often occurs with static type checkers like mypy."
    },
    "DataLossError": {
        "trigger_function": "raise RuntimeError('Data loss occurred.')",
        "explanation": "An operation has resulted in the loss of data, such as truncating a file or discarding important information."
    },
    "ExecutionError": {
        "trigger_function": "raise RuntimeError('Execution error occurred.')",
        "explanation": "A general error occurred during the execution of the program. This can include issues like incorrect algorithm implementation."
    },
    "DependencyError": {
    "trigger_function": "import non_existent_module",
    "explanation": "An attempt was made to import or access a dependency that is missing or unavailable. Ensure that all required libraries or modules are installed and accessible."

    },
    
    "ArithmeticError": {
    "trigger_function": "float('inf') - float('inf')",
    "explanation": "An error occurred during an arithmetic operation. This can include issues like overflow or undefined mathematical operations."
},
"OverflowError": {
    "trigger_function": "2.0 ** 1000",
    "explanation": "A mathematical operation exceeded the maximum limit for a numeric type. This is often due to excessively large values."
},
"LookupError": {
    "trigger_function": "''.index('a')",
    "explanation": "An error occurred during a lookup operation, such as searching for an element in a collection when it does not exist."
},
"ModuleNotFoundError": {
    "trigger_function": "import some_nonexistent_module",
    "explanation": "An attempt was made to import a module that does not exist. Check for typos or verify that the module is installed."
},
"StopAsyncIteration": {
    "trigger_function": "(async for x in async_iterable(): pass)",
    "explanation": "An asynchronous iterator ran out of items. This typically occurs at the end of asynchronous iteration."
},
"UnicodeEncodeError": {
    "trigger_function": "'unicode_string'.encode('ascii')",
    "explanation": "An attempt to encode text contained characters that cannot be represented in the specified encoding."
},
"UnicodeDecodeError": {
    "trigger_function": "b'\\x80abc'.decode('ascii')",
    "explanation": "An error occurred while decoding bytes into text. The byte data does not match the specified encoding format."
},
"IsADirectoryError": {
    "trigger_function": "open('/', 'r')",
    "explanation": "An attempt was made to open a directory as if it were a file. Make sure the path points to a file, not a directory."
},
"NotADirectoryError": {
    "trigger_function": "open('not_a_directory/file.txt', 'r')",
    "explanation": "An attempt was made to access a part of a path that is expected to be a directory, but is not. Verify the file path structure."
},
"BrokenPipeError": {
    "trigger_function": "import os; os.write(1, b'test' * 10000)",
    "explanation": "A write operation was attempted on a pipe or socket that has been closed. This usually happens in inter-process communication."
},
"ChildProcessError": {
    "trigger_function": "import os; os.wait()",
    "explanation": "An operation was attempted on a child process, but the process does not exist or has already been reaped."
},
"FloatingPointError": {
    "trigger_function": "import math; math.sqrt(-1)",
    "explanation": "A floating-point error occurred during a mathematical operation, often due to invalid operations like dividing by zero or taking the square root of a negative number."
},
"KeyboardInterrupt": {
    "trigger_function": "while True: pass",
    "explanation": "The program was manually interrupted by the user, often by pressing Ctrl+C in the terminal."
},
"EOFError": {
    "trigger_function": "input('Enter something: ')",
    "explanation": "An unexpected end-of-file condition was reached, usually occurring when `input()` expects user input, but none is provided."
},
"SystemExit": {{
    "ZeroDivisionError": {
        "trigger_function": "1 / 0",
        "explanation": "You tried to divide a number by zero."
    },
    "IndexError": {
        "trigger_function": "[1][2]",
        "explanation": "You tried to access an index that is outside the range of the list. Ensure the index is within the valid range."
    },
    "SyntaxError": {
        "trigger_function": "exec('x === 2')",
        "explanation": "There's a syntax error in your code. Check for typos, misplaced operators, or other syntax issues."
    },
    "KeyError": {
        "trigger_function": "{}['missing_key']",
        "explanation": "You tried to access a dictionary key that does not exist. Make sure the key is spelled correctly or check if it exists."
    },
    "TypeError": {
        "trigger_function": "'string' + 1",
        "explanation": "You are trying to perform an operation on incompatible data types. Check the types of your variables."
    },
    "ValueError": {
        "trigger_function": "int('string')",
        "explanation": "You passed an argument to a function that is of the right type but has an invalid value. Ensure the value is within the expected range."
    },
    "AttributeError": {
        "trigger_function": "None.some_method()",
        "explanation": "You tried to access or call an attribute or method that does not exist in the object. Check if the attribute or method name is correct."
    },
    "NameError": {
        "trigger_function": "print(undefined_variable)",
        "explanation": "You tried to use a variable or function name that has not been defined. Make sure the name is spelled correctly and is defined."
    },
    "FileNotFoundError": {
        "trigger_function": "open('non_existent_file.txt')",
        "explanation": "The file you're trying to open does not exist. Check the file path and ensure the file exists."
    },
    "ImportError": {
        "trigger_function": "__import__('non_existent_module')",
        "explanation": "You tried to import a module that could not be found or is not installed. Verify the module name and installation."
    },
    "IndentationError": {
        "trigger_function": "exec('if True:\\nprint(\"Indentation Error\")')",
        "explanation": "There is an issue with the indentation of your code. Python relies on proper indentation to define blocks of code."
    },
    "MemoryError": {
        "trigger_function": "[0] * (10**10)",
        "explanation": "Your program has run out of memory. This can happen with very large data structures or infinite loops."
    },
    "RecursionError": {
        "trigger_function": "(lambda f: f(f))(lambda f: f(f))",
        "explanation": "Your function has called itself too many times, leading to a stack overflow. Check for base cases in recursive functions."
    },
    "StopIteration": {
        "trigger_function": "next(iter([]))",
        "explanation": "An iterator or generator has been exhausted, usually in a loop. Ensure you're not iterating beyond the available data."
    },
    "OverflowError": {
        "trigger_function": "float('inf') * 2",
        "explanation": "A numerical operation has exceeded the limits of the numeric type. This often happens with very large numbers."
    },
    "FileExistsError": {
        "trigger_function": "open('existing_file.txt', 'x')",
        "explanation": "The file you're trying to create already exists. Consider using a different file name or check if the file should be overwritten."
    },
    "PermissionError": {
        "trigger_function": "open('/root/forbidden_file.txt')",
        "explanation": "You don't have the necessary permissions to perform the operation, such as reading from or writing to a file."
    },
    "NotImplementedError": {
        "trigger_function": "raise NotImplementedError('This feature is not implemented yet.')",
        "explanation": "A method or function is defined but not implemented. This is often used as a placeholder to indicate that code is missing."
    },
    "ConnectionError": {
        "trigger_function": "raise ConnectionError('Connection failed.')",
        "explanation": "There was an issue with network connectivity or communication, often occurring with external resources or services."
    },
    "TimeoutError": {
        "trigger_function": "raise TimeoutError('Operation timed out.')",
        "explanation": "A network operation took too long to complete and has been stopped. This can happen with web requests or database operations."
    },
    "AssertionError": {
        "trigger_function": "assert False, 'This is an assertion error.'",
        "explanation": "An assert statement failed. This usually indicates that a condition expected to be true was false."
    },
    "EncodingError": {
        "trigger_function": "b'\\x80abc'.decode('utf-8')",
        "explanation": "There was an issue with character encoding when handling text data. Ensure the encoding matches the data being processed."
    },
    "DecodingError": {
        "trigger_function": "b'\\x80abc'.decode('ascii')",
        "explanation": "An error occurred when trying to decode data, usually from bytes to a string. Check if the data format matches the expected encoding."
    },
    "UnboundLocalError": {
        "trigger_function": "def test(): print(x); x = 1; test()",
        "explanation": "A local variable is referenced before it has been assigned a value. Ensure the variable is initialized before use."
    },
    "GeneratorExit": {
        "trigger_function": "(x for x in range(10)).close()",
        "explanation": "A generator was closed or exhausted before completing its intended iteration. This may happen with generators or coroutines."
    },
    "RuntimeError": {
        "trigger_function": "raise RuntimeError('This is a runtime error.')",
        "explanation": "An error that occurs during program execution. This is a broad category that includes various types of runtime issues."
    },
    "FileClosedError": {
        "trigger_function": "f = open('temp.txt', 'w'); f.close(); f.write('data')",
        "explanation": "An operation was attempted on a file that has already been closed. Ensure the file is open before performing operations on it."
    },
    "BufferError": {
        "trigger_function": "raise BufferError('Buffer error occurred.')",
        "explanation": "An operation was attempted on a buffer that has been released or is otherwise unavailable."
    },
    "NotCallableError": {
        "trigger_function": "x = 5; x()",
        "explanation": "An attempt was made to call a non-callable object, such as a non-function or method."
    },
    "NameClashError": {
        "trigger_function": "def test(): pass; test = 5",
        "explanation": "A name conflict occurred, often due to redefinition or improper scoping of variables or functions."
    },
    "NoSuchFileError": {
        "trigger_function": "open('non_existent_file.txt')",
        "explanation": "The file you're trying to access does not exist at the specified location."
    },
    "InconsistentUseOfTabsAndSpacesError": {
        "trigger_function": "exec('if True:\\n\\tprint(1)\\n    print(2)')",
        "explanation": "There is a mix of tabs and spaces used for indentation, leading to inconsistencies in code blocks."
    },
    "DeprecatedFeatureError": {
        "trigger_function": "import imp",
        "explanation": "You are using a feature or function that has been deprecated and may be removed in future versions."
    },
    "ContextError": {
        "trigger_function": "raise RuntimeError('Context error occurred.')",
        "explanation": "An operation or function was used in an incorrect context, such as using an object outside its intended scope."
    },
    "SyntaxWarning": {
        "trigger_function": "import warnings; warnings.warn('syntax warning', SyntaxWarning)",
        "explanation": "The code may not be strictly incorrect but contains constructs that are deprecated or may be problematic in future versions."
    },
    "ValueTooLargeError": {
        "trigger_function": "import sys; sys.setrecursionlimit(10**6)",
        "explanation": "A numerical value exceeds the limits of the numeric type or data structure, such as exceeding the maximum integer size."
    },
    "TypeHintError": {
        "trigger_function": "def func(x: int): pass; func('string')",
        "explanation": "A type hint or annotation does not match the actual type of the value. This often occurs with static type checkers like mypy."
    },
    "DataLossError": {
        "trigger_function": "raise RuntimeError('Data loss occurred.')",
        "explanation": "An operation has resulted in the loss of data, such as truncating a file or discarding important information."
    },
    "ExecutionError": {
        "trigger_function": "raise RuntimeError('Execution error occurred.')",
        "explanation": "A general error occurred during the execution of the program. This can include issues like incorrect algorithm implementation."
    },
    "DependencyError": {
    "trigger_function": "import non_existent_module",
    "explanation": "An attempt was made to import or access a dependency that is missing or unavailable. Ensure that all required libraries or modules are installed and accessible."

    },
    
    "ArithmeticError": {
    "trigger_function": "float('inf') - float('inf')",
    "explanation": "An error occurred during an arithmetic operation. This can include issues like overflow or undefined mathematical operations."
},
"OverflowError": {
    "trigger_function": "2.0 ** 1000",
    "explanation": "A mathematical operation exceeded the maximum limit for a numeric type. This is often due to excessively large values."
},
"LookupError": {
    "trigger_function": "''.index('a')",
    "explanation": "An error occurred during a lookup operation, such as searching for an element in a collection when it does not exist."
},
"ModuleNotFoundError": {
    "trigger_function": "import some_nonexistent_module",
    "explanation": "An attempt was made to import a module that does not exist. Check for typos or verify that the module is installed."
},
"StopAsyncIteration": {
    "trigger_function": "(async for x in async_iterable(): pass)",
    "explanation": "An asynchronous iterator ran out of items. This typically occurs at the end of asynchronous iteration."
},
"UnicodeEncodeError": {
    "trigger_function": "'unicode_string'.encode('ascii')",
    "explanation": "An attempt to encode text contained characters that cannot be represented in the specified encoding."
},
"UnicodeDecodeError": {
    "trigger_function": "b'\\x80abc'.decode('ascii')",
    "explanation": "An error occurred while decoding bytes into text. The byte data does not match the specified encoding format."
},
"IsADirectoryError": {
    "trigger_function": "open('/', 'r')",
    "explanation": "An attempt was made to open a directory as if it were a file. Make sure the path points to a file, not a directory."
},
"NotADirectoryError": {
    "trigger_function": "open('not_a_directory/file.txt', 'r')",
    "explanation": "An attempt was made to access a part of a path that is expected to be a directory, but is not. Verify the file path structure."
},
"BrokenPipeError": {
    "trigger_function": "import os; os.write(1, b'test' * 10000)",
    "explanation": "A write operation was attempted on a pipe or socket that has been closed. This usually happens in inter-process communication."
},
"ChildProcessError": {
    "trigger_function": "import os; os.wait()",
    "explanation": "An operation was attempted on a child process, but the process does not exist or has already been reaped."
},
"FloatingPointError": {
    "trigger_function": "import math; math.sqrt(-1)",
    "explanation": "A floating-point error occurred during a mathematical operation, often due to invalid operations like dividing by zero or taking the square root of a negative number."
},
"KeyboardInterrupt": {
    "trigger_function": "while True: pass",
    "explanation": "The program was manually interrupted by the user, often by pressing Ctrl+C in the terminal."
},
"EOFError": {
    "trigger_function": "input('Enter something: ')",
    "explanation": "An unexpected end-of-file condition was reached, usually occurring when `input()` expects user input, but none is provided."
},
"SystemExit": {
    "trigger_function": "import sys; sys.exit()",
    "explanation": "The program was terminated using the `sys.exit()` function. This is often used to end a script before it completes naturally."
},
"ImportWarning": {
    "trigger_function": "import warnings; warnings.warn('import warning', ImportWarning)",
    "explanation": "A warning related to module imports. This could indicate potential issues with module compatibility or deprecation."
},
"PendingDeprecationWarning": {
    "trigger_function": "import warnings; warnings.warn('pending deprecation', PendingDeprecationWarning)",
    "explanation": "A feature is marked for future deprecation but is still currently available. Update the code to prevent future issues."
},
"UserWarning": {
    "trigger_function": "import warnings; warnings.warn('user warning', UserWarning)",
    "explanation": "A generic warning issued by user code, often to signal a non-critical issue that may need attention."
}


    "trigger_function": "import sys; sys.exit()",
    "explanation": "The program was terminated using the `sys.exit()` function. This is often used to end a script before it completes naturally."
},
"ImportWarning": {
    "trigger_function": "import warnings; warnings.warn('import warning', ImportWarning)",
    "explanation": "A warning related to module imports. This could indicate potential issues with module compatibility or deprecation."
},
"PendingDeprecationWarning": {
    "trigger_function": "import warnings; warnings.warn('pending deprecation', PendingDeprecationWarning)",
    "explanation": "A feature is marked for future deprecation but is still currently available. Update the code to prevent future issues."
},
"UserWarning": {
    "trigger_function": "import warnings; warnings.warn('user warning', UserWarning)",
    "explanation": "A generic warning issued by user code, often to signal a non-critical issue that may need attention."
}

